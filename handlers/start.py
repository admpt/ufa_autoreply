import asyncio
import datetime
import json
import os
from pathlib import Path

from aiogram import Router, F
from aiogram.client import bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.methods import DeleteBusinessMessages, PinChatMessage
from aiogram.types import Message, InlineKeyboardButton, FSInputFile, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_dialog import DialogManager, ShowMode, StartMode
from aiogram import types
from dialogs import bot_settings
from states.user import Menu


start_router = Router()
# **********************************************************************************************************************
ufa_main = FSInputFile("images/menu/hi.jpg")
ufa = FSInputFile("images/uslugi_ufa/ufa.jpg")
getcontact = FSInputFile("images/getcontact/getcontact.png")
numbuster = FSInputFile("images/numbuster/numbuster.png")
yandex_direct = FSInputFile("images/ads_yandex_direct/yandex_direct.jpg")
site = FSInputFile("images/development/site.jpg")
money = FSInputFile("images/images/money.jpg")
email = FSInputFile("images/email/email.jpg")
other = FSInputFile("images/other/other.jpg")


getcontact_text = """<b>GetContact</b>\n\n–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Getcontact –º—ã –º–æ–∂–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞—Ç—å –¥–ª—è –≤–∞—Å —Ç–µ–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã, –∏–º–µ–Ω–Ω–æ —Ç–µ - –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ, –∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –≤–¥—Ä—É–≥ –æ–Ω–∏ –í–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –∏–ª–∏ –∂–µ –æ–Ω–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
numbuster_text = """<b>Numbuster</b>\n\n–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ NumBuster –º—ã –º–æ–∂–µ–º –ø–æ–≤—ã—Å–∏—Ç—å –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é –Ω–∞–∫—Ä—É—Ç–∫–∏ –º–µ—Ç–æ–∫ (—Å–º–∞–π–ª–∏–∫–æ–≤), –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–ª—è –≤–∞—Å –æ—Ç–∑—ã–≤—ã –∏ —Ç–µ–≥–∏ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º—ã –≥–æ—Ç–æ–≤—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–∫–∏, –æ—Ç–∑—ã–≤—ã –∏–ª–∏ —Ç–µ–≥–∏. –û–¥–Ω–∞–∫–æ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–µ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏ —Ç–µ–≥–∏ –ø–æ–¥–ª–µ–∂–∞—Ç —É–¥–∞–ª–µ–Ω–∏—é ‚Äî –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –≤–∞—Å –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É.\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
yandex_direct_text = """<b>–Ø–Ω–¥–µ–∫—Å –î–∏—Ä–µ–∫—Ç</b>\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —É—Å–ª—É–≥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã –≤ –Ø–Ω–¥–µ–∫—Å–µ. –í—Å–µ —Ü–µ–Ω—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
development_text = """<b>Web –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞</b>\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —É—Å–ª—É–≥ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—Å–µ —Ü–µ–Ω—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
money_text = """<b>–û–ø–ª–∞—Ç–∞</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º. –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –≤–∏–¥ —É—Å–ª—É–≥–∏.\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
other_text = """<b>–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏</b>\n\n–£ –Ω–∞—Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É—Å–ª—É–≥, –∏ –æ–Ω–∏ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è, –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å —É—Å–ª—É–≥–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≤—Å–µ —É—Å–ª—É–≥–∏\"\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
email_text = """<b>E-mail —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–ú—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç –∑–∞–Ω–∏–º–∞–µ–º—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏ e-mail —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ SMTP-—Å–µ—Ä–≤–µ—Ä—ã —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ IP –∏ –≤—ã—Å–æ–∫–æ–π –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç—å—é (–¥–æ 97% –ø–∏—Å–µ–º –≤–æ ¬´–í—Ö–æ–¥—è—â–∏–µ¬ª). –°—Ç–∞–±–∏–ª—å–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π POOL IP —Å –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π. –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É ¬´–ø–æ–¥ –∫–ª—é—á¬ª –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ–±—É—á–∏–º –≤–∞—Å –≤—Å–µ–º —ç—Ç–∞–ø–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚Äî —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏.\n\n<b><a href="tg://resolve?domain=ufazdes_sale">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</a> <b>l</b> <a href="tg://resolve?domain=ufazdesvpn_bot">–õ—É—á—à–∏–π VPN</a> <b>l</b> <a href="https://ufazdes.ru/">–ù–∞—à —Å–∞–π—Ç</a></b>"""
# **********************************************************************************************************************
OWNER_ID = 7162682842

async def send_main_menu(message: Message, dialog_manager: DialogManager, state: FSMContext) -> None:
    data = await state.get_data()
    previous_message_id = data.get("previous_message_id")

    user = dialog_manager.event.from_user
    full_name = f"{user.first_name or '–ì–æ—Å—Ç—å'} {user.last_name or ''}".strip()
    auto_reply_text = f"<b><i>{full_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –º–µ–Ω—é –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ ufazdes.ru!</i></b>"


    business_connection_id = getattr(message, 'business_connection_id', None)
    if previous_message_id and business_connection_id:
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {previous_message_id} —á–µ—Ä–µ–∑ DeleteBusinessMessages")
            await message.bot.delete_business_messages(
                business_connection_id=business_connection_id,
                message_ids=[previous_message_id]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã",
            callback_data="team"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–û—Ç–∑—ã–≤—ã",
            url="https://t.me/otzyv_ufazdes"
        ),
        InlineKeyboardButton(
            text="–ê–∫—Ü–∏–∏",
            url="https://t.me/ufazdes_sale"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∞",
            callback_data="money"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=" ü´µ–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            callback_data="give_me_manager"
        )
    )

    sent_message = await message.answer_photo(
        photo=ufa_main,
        caption=auto_reply_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

    await state.update_data(previous_message_id=sent_message.message_id)


@start_router.business_message()
async def start(message: Message, dialog_manager: DialogManager, state: FSMContext) -> None:
    if message.from_user.id == OWNER_ID:
        return
    await send_main_menu(message, dialog_manager, state)


@start_router.callback_query(lambda c: c.data == "back")
async def back_to_main(callback_query: types.CallbackQuery, dialog_manager: DialogManager, state: FSMContext) -> None:
    try:
        await callback_query.message.delete()
    except Exception as e:
        print(f"[back_to_main] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await send_main_menu(callback_query.message, dialog_manager, state)



@start_router.callback_query(lambda c: c.data == "team")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="Getcontact",
            callback_data="getcontact"
        ),
        InlineKeyboardButton(
            text="Numbuster",
            callback_data="numbuster"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–†–µ–∫–ª–∞–º–∞",
            callback_data="yandex_direct"
        ),
        InlineKeyboardButton(
            text="–†–∞—Å—Å—ã–ª–∫–∏",
            callback_data="email"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="C–∞–π—Ç—ã",
            callback_data="development"
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏",
            callback_data="other"
        ),
    )

    await callback_query.message.answer_photo(
        photo=ufa,
        caption="–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@start_router.callback_query(lambda c: c.data == "getcontact")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    caption = getcontact_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∞",
            callback_data="money"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=" ü´µ–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            callback_data="give_me_manager"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )

    await callback_query.message.answer_photo(
        photo=FSInputFile("images/getcontact/getcontact.png"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@start_router.callback_query(lambda c: c.data == "numbuster")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    caption = numbuster_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∞",
            callback_data="money"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=" ü´µ–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            callback_data="give_me_manager"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )

    await callback_query.message.answer_photo(
        photo=FSInputFile("images/numbuster/numbuster.png"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@start_router.callback_query(lambda c: c.data == "yandex_direct")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    caption = yandex_direct_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∞",
            callback_data="money"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=" ü´µ–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            callback_data="give_me_manager"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )

    await callback_query.message.answer_photo(
        photo=FSInputFile("images/ads_yandex_direct/ads.png"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@start_router.callback_query(lambda c: c.data == "development")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    caption = development_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∞",
            callback_data="money"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=" ü´µ–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            callback_data="give_me_manager"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )


    await callback_query.message.answer_photo(
        photo=FSInputFile("images/development/site.png"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@start_router.callback_query(lambda c: c.data == "email")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    caption = email_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∞",
            callback_data="money"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=" ü´µ–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            callback_data="give_me_manager"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )


    await callback_query.message.answer_photo(
        photo=FSInputFile("images/email/email.jpg"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )



@start_router.callback_query(lambda c: c.data == "money")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    caption = money_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )

    await callback_query.message.answer_photo(
        photo=FSInputFile("images/images/money.jpg"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@start_router.callback_query(lambda c: c.data == "other")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    if callback_query.from_user.id != OWNER_ID:
        return
    caption = other_text

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–í—Å–µ —É—Å–ª—É–≥–∏",
            url="https://t.me/price_ufazdes"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
            callback_data="back"
        )
    )

    await callback_query.message.answer_photo(
        photo=FSInputFile("images/other/other.jpg"),
        caption=caption,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


BOSS_ID = 7208555539
@start_router.callback_query(lambda c: c.data == "give_me_manager")
async def greet_button_pressed(callback_query: types.CallbackQuery, dialog_manager: DialogManager) -> None:
    user = callback_query.from_user
    user_mention = f"@{user.username}" if user.username else f"<code>{user.id}</code>"

    await callback_query.message.answer(
        text="–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–æ–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )

    await callback_query.bot.send_message(
        BOSS_ID,
        f"–ö–ª–∏–µ–Ω—Ç {user_mention} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å!",
        parse_mode="HTML"
    )